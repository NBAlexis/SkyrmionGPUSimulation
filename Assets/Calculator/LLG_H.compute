// Each #kernel tells which function to compile; you can have many kernels

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWStructuredBuffer<float3> magneticMomentum;
//Using RFloat texture format so we do not need a float4.
RWTexture2D<float> magneticMomentumX;
RWTexture2D<float> magneticMomentumY;
RWTexture2D<float> magneticMomentumZ;

//1024 x 1024
//0,0-512,512 is k1
//512,0-1024,512 is k2
//0,512-512,1024 is k3
RWTexture2D<float> k1x;
RWTexture2D<float> k1y;
RWTexture2D<float> k1z;

Texture2D<float4> boundaryCondition;
Texture2D<float> exchangeStrength;
Texture2D<float> dmStrength;
Texture2D<float> magneticStrength;
Texture2D<float> jxPeroidFunction;

uint2 size;
float K;
//float D;
//float D0;
//float B;
float alpha;
float timestep;
uint jxstep; //read only, set it in script
uint jxperoid;

#pragma kernel CaclK1

[numthreads(16, 16, 1)]
void CaclK1(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    float3 s = float3(magneticMomentumX[id.xy], magneticMomentumY[id.xy], magneticMomentumZ[id.xy]);

    uint2 site_l = id.xy - uint2(1, 0);
    uint2 site_r = id.xy + uint2(1, 0);
    uint2 site_d = id.xy - uint2(0, 1);
    uint2 site_u = id.xy + uint2(0, 1);

    float3 sleft = id.x > 1 ? float3(magneticMomentumX[site_l], magneticMomentumY[site_l], magneticMomentumZ[site_l]) : zero3;
    float3 sright = id.x < (size.x - 1) ? float3(magneticMomentumX[site_r], magneticMomentumY[site_r], magneticMomentumZ[site_r]) : zero3;
    float3 sdown = id.y > 1 ? float3(magneticMomentumX[site_d], magneticMomentumY[site_d], magneticMomentumZ[site_d]) : zero3;
    float3 sup = id.y < (size.y - 1) ? float3(magneticMomentumX[site_u], magneticMomentumY[site_u], magneticMomentumZ[site_u]) : zero3;
        
    float j_s = exchangeStrength[id.xy];
    float j_left = id.x > 1 ? exchangeStrength[site_l] : 0.0f;
    float j_down = id.y > 1 ? exchangeStrength[site_d] : 0.0f;

    float d_s = dmStrength[id.xy];
    float d_left = id.x > 1 ? dmStrength[site_l] : 0.0f;
    float d_down = id.y > 1 ? dmStrength[site_d] : 0.0f;

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is now
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2(jxstep % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k1res = timestep * newS;

    k1x[id.xy] = k1res.x;
    k1y[id.xy] = k1res.y;
    k1z[id.xy] = k1res.z;
}

#pragma kernel CaclK2

[numthreads(16, 16, 1)]
void CaclK2(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    uint2 site_l = id.xy - uint2(1, 0);
    uint2 site_r = id.xy + uint2(1, 0);
    uint2 site_d = id.xy - uint2(0, 1);
    uint2 site_u = id.xy + uint2(0, 1);

    float3 s = float3(magneticMomentumX[id.xy] + 0.5 * k1x[id.xy], 
                      magneticMomentumY[id.xy] + 0.5 * k1y[id.xy],
                      magneticMomentumZ[id.xy] + 0.5 * k1z[id.xy]);

    float3 sleft = id.x > 1 ? 
        float3(magneticMomentumX[id.xy - uint2(1, 0)] + 0.5 * k1x[id.xy - uint2(1, 0)],
               magneticMomentumY[id.xy - uint2(1, 0)] + 0.5 * k1y[id.xy - uint2(1, 0)],
               magneticMomentumZ[id.xy - uint2(1, 0)] + 0.5 * k1z[id.xy - uint2(1, 0)]) : zero3;
    float3 sright = id.x < (size.x - 1) ? 
        float3(magneticMomentumX[id.xy + uint2(1, 0)] + 0.5 * k1x[id.xy + uint2(1, 0)],
               magneticMomentumY[id.xy + uint2(1, 0)] + 0.5 * k1y[id.xy + uint2(1, 0)],
               magneticMomentumZ[id.xy + uint2(1, 0)] + 0.5 * k1z[id.xy + uint2(1, 0)]) : zero3;
    float3 sdown = id.y > 1 ? 
        float3(magneticMomentumX[id.xy - uint2(0, 1)] + 0.5 * k1x[id.xy - uint2(0, 1)],
               magneticMomentumY[id.xy - uint2(0, 1)] + 0.5 * k1y[id.xy - uint2(0, 1)],
               magneticMomentumZ[id.xy - uint2(0, 1)] + 0.5 * k1z[id.xy - uint2(0, 1)]) : zero3;
    float3 sup = id.y < (size.y - 1) ? 
        float3(magneticMomentumX[id.xy + uint2(0, 1)] + 0.5 * k1x[id.xy + uint2(0, 1)],
               magneticMomentumY[id.xy + uint2(0, 1)] + 0.5 * k1y[id.xy + uint2(0, 1)],
               magneticMomentumZ[id.xy + uint2(0, 1)] + 0.5 * k1z[id.xy + uint2(0, 1)]) : zero3;

    float j_s = exchangeStrength[id.xy];
    float j_left = id.x > 1 ? exchangeStrength[site_l] : 0.0f;
    float j_down = id.y > 1 ? exchangeStrength[site_d] : 0.0f;

    float d_s = dmStrength[id.xy];
    float d_left = id.x > 1 ? dmStrength[site_l] : 0.0f;
    float d_down = id.y > 1 ? dmStrength[site_d] : 0.0f;

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + 0.5 dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 1) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k2res = timestep * newS;

    uint2 setsite = id.xy + uint2(size[0], 0);
    k1x[setsite] = k2res.x;
    k1y[setsite] = k2res.y;
    k1z[setsite] = k2res.z;
}

#pragma kernel CaclK3

[numthreads(16, 16, 1)]
void CaclK3(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    uint2 site_l = id.xy - uint2(1, 0);
    uint2 site_r = id.xy + uint2(1, 0);
    uint2 site_d = id.xy - uint2(0, 1);
    uint2 site_u = id.xy + uint2(0, 1);
    uint2 offset_site = id.xy + uint2(size[0], 0);
    uint2 offset_site_l = site_l + uint2(size[0], 0);
    uint2 offset_site_r = site_r + uint2(size[0], 0);
    uint2 offset_site_d = site_d + uint2(size[0], 0);
    uint2 offset_site_u = site_u + uint2(size[0], 0);

    float3 s = float3(magneticMomentumX[id.xy] + 0.5 * k1x[offset_site],
                      magneticMomentumY[id.xy] + 0.5 * k1y[offset_site],
                      magneticMomentumZ[id.xy] + 0.5 * k1z[offset_site]);

    float3 sleft = id.x > 1 ?
        float3(magneticMomentumX[site_l] + 0.5 * k1x[offset_site_l],
               magneticMomentumY[site_l] + 0.5 * k1y[offset_site_l],
               magneticMomentumZ[site_l] + 0.5 * k1z[offset_site_l]) : zero3;
    float3 sright = id.x < (size.x - 1) ?
        float3(magneticMomentumX[site_r] + 0.5 * k1x[offset_site_r],
               magneticMomentumY[site_r] + 0.5 * k1y[offset_site_r],
               magneticMomentumZ[site_r] + 0.5 * k1z[offset_site_r]) : zero3;
    float3 sdown = id.y > 1 ?
        float3(magneticMomentumX[site_d] + 0.5 * k1x[offset_site_d],
               magneticMomentumY[site_d] + 0.5 * k1y[offset_site_d],
               magneticMomentumZ[site_d] + 0.5 * k1z[offset_site_d]) : zero3;
    float3 sup = id.y < (size.y - 1) ?
        float3(magneticMomentumX[site_u] + 0.5 * k1x[offset_site_u],
               magneticMomentumY[site_u] + 0.5 * k1y[offset_site_u],
               magneticMomentumZ[site_u] + 0.5 * k1z[offset_site_u]) : zero3;

    float j_s = exchangeStrength[id.xy];
    float j_left = id.x > 1 ? exchangeStrength[site_l] : 0.0f;
    float j_down = id.y > 1 ? exchangeStrength[site_d] : 0.0f;

    float d_s = dmStrength[id.xy];
    float d_left = id.x > 1 ? dmStrength[site_l] : 0.0f;
    float d_down = id.y > 1 ? dmStrength[site_d] : 0.0f;

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + 0.5 dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 1) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k3res = timestep * newS;

    uint2 setsite = id.xy + uint2(0, size[1]);
    k1x[setsite] = k3res.x;
    k1y[setsite] = k3res.y;
    k1z[setsite] = k3res.z;
}

#pragma kernel CSMain

//(0,0) is left buttom corner!
//only change the name up to down, the result is unchanged...
[numthreads(16, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Calculate K4 first
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    uint2 site_l = id.xy - uint2(1, 0);
    uint2 site_r = id.xy + uint2(1, 0);
    uint2 site_d = id.xy - uint2(0, 1);
    uint2 site_u = id.xy + uint2(0, 1);
    uint2 offset_site = id.xy + uint2(0, size[1]);
    uint2 offset_site_l = site_l + uint2(0, size[1]);
    uint2 offset_site_r = site_r + uint2(0, size[1]);
    uint2 offset_site_d = site_d + uint2(0, size[1]);
    uint2 offset_site_u = site_u + uint2(0, size[1]);

    float3 s = float3(magneticMomentumX[id.xy] + k1x[offset_site],
                      magneticMomentumY[id.xy] + k1y[offset_site],
                      magneticMomentumZ[id.xy] + k1z[offset_site]);

    float3 sleft = id.x > 1 ?
        float3(magneticMomentumX[site_l] + k1x[offset_site_l],
               magneticMomentumY[site_l] + k1y[offset_site_l],
               magneticMomentumZ[site_l] + k1z[offset_site_l]) : zero3;
    float3 sright = id.x < (size.x - 1) ?
        float3(magneticMomentumX[site_r] + k1x[offset_site_r],
               magneticMomentumY[site_r] + k1y[offset_site_r],
               magneticMomentumZ[site_r] + k1z[offset_site_r]) : zero3;
    float3 sdown = id.y > 1 ?
        float3(magneticMomentumX[site_d] + k1x[offset_site_d],
               magneticMomentumY[site_d] + k1y[offset_site_d],
               magneticMomentumZ[site_d] + k1z[offset_site_d]) : zero3;
    float3 sup = id.y < (size.y - 1) ?
        float3(magneticMomentumX[site_u] + k1x[offset_site_u],
               magneticMomentumY[site_u] + k1y[offset_site_u],
               magneticMomentumZ[site_u] + k1z[offset_site_u]) : zero3;

    float j_s = exchangeStrength[id.xy];
    float j_left = id.x > 1 ? exchangeStrength[site_l] : 0.0f;
    float j_down = id.y > 1 ? exchangeStrength[site_d] : 0.0f;

    float d_s = dmStrength[id.xy];
    float d_left = id.x > 1 ? dmStrength[site_l] : 0.0f;
    float d_down = id.y > 1 ? dmStrength[site_d] : 0.0f;

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 2) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    //add time for jx current
    //jxstep = jxstep + 2;

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k4res = timestep * newS;

    k4res = (k4res + float3(k1x[id.xy], k1y[id.xy], k1z[id.xy]) + 
        2.0 * float3(k1x[id.xy + uint2(size[0], 0)], k1y[id.xy + uint2(size[0], 0)], k1z[id.xy + uint2(size[0], 0)]) +
        2.0 * float3(k1x[id.xy + uint2(0, size[1])], k1y[id.xy + uint2(0, size[1])], k1z[id.xy + uint2(0, size[1])]))/6.0;
    
    float edge = boundaryCondition[id.xy].r > 0.5f ? 1.0f : 0.0f;

    s = float3(magneticMomentumX[id.xy], magneticMomentumY[id.xy], magneticMomentumZ[id.xy]);
    float3 retColor = edge < 0.5f ? zero3 : normalize(s + k4res);

    magneticMomentumX[id.xy] = retColor.x * edge;
    magneticMomentumY[id.xy] = retColor.y * edge;
    magneticMomentumZ[id.xy] = retColor.z * edge;
}

#pragma kernel CaclK1p

[numthreads(16, 16, 1)]
void CaclK1p(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    float3 s = float3(magneticMomentumX[id.xy], magneticMomentumY[id.xy], magneticMomentumZ[id.xy]);

    uint2 gleft  = uint2((id.x + size.x - 1) & (size.x - 1), id.y);
    uint2 gright = uint2((id.x + 1) & (size.x - 1), id.y);
    uint2 gdown  = uint2(id.x, (id.y + size.y - 1) & (size.y - 1));
    uint2 gup    = uint2(id.x, (id.y + 1) & (size.y - 1));

    float3 sleft = float3(magneticMomentumX[gleft], magneticMomentumY[gleft], magneticMomentumZ[gleft]);
    float3 sright = float3(magneticMomentumX[gright], magneticMomentumY[gright], magneticMomentumZ[gright]);
    float3 sdown = float3(magneticMomentumX[gdown], magneticMomentumY[gdown], magneticMomentumZ[gdown]);
    float3 sup = float3(magneticMomentumX[gup], magneticMomentumY[gup], magneticMomentumZ[gup]);

    float j_s = exchangeStrength[id.xy];
    float j_left = exchangeStrength[gleft];
    float j_down = exchangeStrength[gdown];

    float d_s = dmStrength[id.xy];
    float d_left = dmStrength[gleft];
    float d_down = dmStrength[gdown];

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is now
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2(jxstep % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k1res = timestep * newS;

    k1x[id.xy] = k1res.x;
    k1y[id.xy] = k1res.y;
    k1z[id.xy] = k1res.z;
}

#pragma kernel CaclK2p

[numthreads(16, 16, 1)]
void CaclK2p(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    float3 s = float3(magneticMomentumX[id.xy] + 0.5 * k1x[id.xy],
        magneticMomentumY[id.xy] + 0.5 * k1y[id.xy],
        magneticMomentumZ[id.xy] + 0.5 * k1z[id.xy]);

    uint2 gleft = uint2((id.x + size.x - 1) & (size.x - 1), id.y);
    uint2 gright = uint2((id.x + 1) & (size.x - 1), id.y);
    uint2 gdown = uint2(id.x, (id.y + size.y - 1) & (size.y - 1));
    uint2 gup = uint2(id.x, (id.y + 1) & (size.y - 1));

    float3 sleft = float3(magneticMomentumX[gleft] + 0.5 * k1x[gleft],
                          magneticMomentumY[gleft] + 0.5 * k1y[gleft],
                          magneticMomentumZ[gleft] + 0.5 * k1z[gleft]);
    float3 sright = float3(magneticMomentumX[gright] + 0.5 * k1x[gright],
                           magneticMomentumY[gright] + 0.5 * k1y[gright],
                           magneticMomentumZ[gright] + 0.5 * k1z[gright]);
    float3 sdown = float3(magneticMomentumX[gdown] + 0.5 * k1x[gdown],
                          magneticMomentumY[gdown] + 0.5 * k1y[gdown],
                          magneticMomentumZ[gdown] + 0.5 * k1z[gdown]);
    float3 sup = float3(magneticMomentumX[gup] + 0.5 * k1x[gup],
                        magneticMomentumY[gup] + 0.5 * k1y[gup],
                        magneticMomentumZ[gup] + 0.5 * k1z[gup]);

    float j_s = exchangeStrength[id.xy];
    float j_left = exchangeStrength[gleft];
    float j_down = exchangeStrength[gdown];

    float d_s = dmStrength[id.xy];
    float d_left = dmStrength[gleft];
    float d_down = dmStrength[gdown];

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + 0.5 dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 1) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k2res = timestep * newS;

    uint2 setsite = id.xy + uint2(size[0], 0);
    k1x[setsite] = k2res.x;
    k1y[setsite] = k2res.y;
    k1z[setsite] = k2res.z;
}

#pragma kernel CaclK3p

[numthreads(16, 16, 1)]
void CaclK3p(uint3 id : SV_DispatchThreadID)
{
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    uint2 offset_site = id.xy + uint2(size[0], 0);
    float3 s = float3(magneticMomentumX[id.xy] + 0.5 * k1x[offset_site],
                      magneticMomentumY[id.xy] + 0.5 * k1y[offset_site],
                      magneticMomentumZ[id.xy] + 0.5 * k1z[offset_site]);

    uint2 gleft = uint2((id.x + size.x - 1) & (size.x - 1), id.y);
    uint2 gright = uint2((id.x + 1) & (size.x - 1), id.y);
    uint2 gdown = uint2(id.x, (id.y + size.y - 1) & (size.y - 1));
    uint2 gup = uint2(id.x, (id.y + 1) & (size.y - 1));
    uint2 offset_gleft = gleft + uint2(size[0], 0);
    uint2 offset_gright = gright + uint2(size[0], 0);
    uint2 offset_gdown = gdown + uint2(size[0], 0);
    uint2 offset_gup = gup + uint2(size[0], 0);

    float3 sleft = float3(magneticMomentumX[gleft] + 0.5 * k1x[offset_gleft],
                          magneticMomentumY[gleft] + 0.5 * k1y[offset_gleft],
                          magneticMomentumZ[gleft] + 0.5 * k1z[offset_gleft]);
    float3 sright = float3(magneticMomentumX[gright] + 0.5 * k1x[offset_gright],
                           magneticMomentumY[gright] + 0.5 * k1y[offset_gright],
                           magneticMomentumZ[gright] + 0.5 * k1z[offset_gright]);
    float3 sdown = float3(magneticMomentumX[gdown] + 0.5 * k1x[offset_gdown],
                          magneticMomentumY[gdown] + 0.5 * k1y[offset_gdown],
                          magneticMomentumZ[gdown] + 0.5 * k1z[offset_gdown]);
    float3 sup = float3(magneticMomentumX[gup] + 0.5 * k1x[offset_gup],
                        magneticMomentumY[gup] + 0.5 * k1y[offset_gup],
                        magneticMomentumZ[gup] + 0.5 * k1z[offset_gup]);

    float j_s = exchangeStrength[id.xy];
    float j_left = exchangeStrength[gleft];
    float j_down = exchangeStrength[gdown];

    float d_s = dmStrength[id.xy];
    float d_left = dmStrength[gleft];
    float d_down = dmStrength[gdown];

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + 0.5 dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 1) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k3res = timestep * newS;

    uint2 setsite = id.xy + uint2(0, size[1]);
    k1x[setsite] = k3res.x;
    k1y[setsite] = k3res.y;
    k1z[setsite] = k3res.z;
}

#pragma kernel CSMainp

//(0,0) is left buttom corner!
//only change the name up to down, the result is unchanged...
[numthreads(16, 16, 1)]
void CSMainp(uint3 id : SV_DispatchThreadID)
{
    //Calculate K4 first
    float3 zero3 = float3(0.0f, 0.0f, 0.0f);

    uint2 offsetsite = id.xy + uint2(0, size[1]);
    float3 s = float3(magneticMomentumX[id.xy] + k1x[offsetsite],
                      magneticMomentumY[id.xy] + k1y[offsetsite],
                      magneticMomentumZ[id.xy] + k1z[offsetsite]);

    uint2 gleft = uint2((id.x + size.x - 1) & (size.x - 1), id.y);
    uint2 gright = uint2((id.x + 1) & (size.x - 1), id.y);
    uint2 gdown = uint2(id.x, (id.y + size.y - 1) & (size.y - 1));
    uint2 gup = uint2(id.x, (id.y + 1) & (size.y - 1));
    uint2 offset_gleft = gleft + uint2(0, size[1]);
    uint2 offset_gright = gright + uint2(0, size[1]);
    uint2 offset_gdown = gdown + uint2(0, size[1]);
    uint2 offset_gup = gup + uint2(0, size[1]);

    float3 sleft = float3(magneticMomentumX[gleft] + k1x[offset_gleft],
                          magneticMomentumY[gleft] + k1y[offset_gleft],
                          magneticMomentumZ[gleft] + k1z[offset_gleft]);
    float3 sright = float3(magneticMomentumX[gright] + k1x[offset_gright],
                           magneticMomentumY[gright] + k1y[offset_gright],
                           magneticMomentumZ[gright] + k1z[offset_gright]);
    float3 sdown = float3(magneticMomentumX[gdown] + k1x[offset_gdown],
                          magneticMomentumY[gdown] + k1y[offset_gdown],
                          magneticMomentumZ[gdown] + k1z[offset_gdown]);
    float3 sup = float3(magneticMomentumX[gup] + k1x[offset_gup],
                        magneticMomentumY[gup] + k1y[offset_gup],
                        magneticMomentumZ[gup] + k1z[offset_gup]);

    float j_s = exchangeStrength[id.xy];
    float j_left = exchangeStrength[gleft];
    float j_down = exchangeStrength[gdown];

    float d_s = dmStrength[id.xy];
    float d_left = dmStrength[gleft];
    float d_down = dmStrength[gdown];

    float B = magneticStrength[id.xy];

    float3 vright = float3(1.0, 0.0, 0.0);
    float3 vup = float3(0.0, 1.0, 0.0);

    float3 beff = (j_left * sleft + j_s * sright + j_down * sdown + j_s * sup)
        + (d_s * cross(sright, vright) - d_left * cross(sleft, vright) + d_s * cross(sup, vup) - d_down * cross(sdown, vup))
        + float3(0.0f, 0.0f, B) + 2.0 * K * float3(0.0f, 0.0f, s.z);

    //t is t + dt
    float jx = jxperoid > 0 ? jxPeroidFunction[uint2((jxstep + 2) % jxperoid, 0)] : 0.0f;
    float3 stt = -jx * cross(s, cross((sright - sleft) * 0.5f, s));

    //add time for jx current
    //jxstep = jxstep + 2;

    float3 newS = cross(s, beff) + stt;
    newS = (newS - alpha * cross(s, newS)) / (1 + alpha * alpha);

    float3 k4res = timestep * newS;

    k4res = (k4res + float3(k1x[id.xy], k1y[id.xy], k1z[id.xy]) +
        2.0 * float3(k1x[id.xy + uint2(size[0], 0)], k1y[id.xy + uint2(size[0], 0)], k1z[id.xy + uint2(size[0], 0)]) +
        2.0 * float3(k1x[offsetsite], k1y[offsetsite], k1z[offsetsite])) / 6.0;

    s = float3(magneticMomentumX[id.xy], magneticMomentumY[id.xy], magneticMomentumZ[id.xy]);
    float3 retColor = normalize(s + k4res);

    magneticMomentumX[id.xy] = retColor.x;
    magneticMomentumY[id.xy] = retColor.y;
    magneticMomentumZ[id.xy] = retColor.z;
}
